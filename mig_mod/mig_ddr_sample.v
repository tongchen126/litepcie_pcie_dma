// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : chentong_k7325t.v
// Device     : xc7k325tffg676-2
// LiteX sha1 : a742731d
// Date       : 2021-11-16 08:50:51
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module chentong_k7325t #(
   parameter C_S_AXI_ID_WIDTH              = 4,
                                             // Width of all master and slave ID signals.
                                             // # = >= 1.
   parameter C_S_AXI_ADDR_WIDTH            = 30,
                                             // Width of S_AXI_AWADDR, S_AXI_ARADDR, M_AXI_AWADDR and
                                             // M_AXI_ARADDR for all SI/MI slots.
                                             // # = 32.
   parameter C_S_AXI_DATA_WIDTH            = 128
)(
	output reg  serial_tx,
	input  wire serial_rx,
	input  wire sys_ddr_rst,
	(* dont_touch = "true" *)	input  wire clk100,
	output reg  user_led0,
	output reg  user_led1,
	output reg  user_led2,
	output reg  user_led3,
	output reg  spisdcard_clk,
	output reg  spisdcard_cs_n,
	output reg  spisdcard_mosi,
	input  wire spisdcard_miso,
	
	
	
	
   inout [63:0]                         ddr3_dq,
   inout [7:0]                        ddr3_dqs_n,
   inout [7:0]                        ddr3_dqs_p,

   // Outputs
   output [13:0]                       ddr3_addr,
   output [2:0]                      ddr3_ba,
   output                                       ddr3_ras_n,
   output                                       ddr3_cas_n,
   output                                       ddr3_we_n,
   output                                       ddr3_reset_n,
   output [0:0]                        ddr3_ck_p,
   output [0:0]                        ddr3_ck_n,
   output [0:0]                       ddr3_cke,
   
   output [0:0]           ddr3_cs_n,
   
   output [7:0]                        ddr3_dm,
   
   output [0:0]                       ddr3_odt,
   
   output                               init_calib_complete,
   // Inputs
   
   // Differential system clocks
   input                                        sys_clk_p,
   input                                        sys_clk_n
   

   
);











  // Slave Interface Write Address Ports
  wire [C_S_AXI_ID_WIDTH-1:0]       s_axi_awid;
  wire [C_S_AXI_ADDR_WIDTH-1:0]     s_axi_awaddr;
  wire [7:0]                        s_axi_awlen;
  wire [2:0]                        s_axi_awsize;
  wire [1:0]                        s_axi_awburst;
  wire [0:0]                        s_axi_awlock;
  wire [3:0]                        s_axi_awcache;
  wire [2:0]                        s_axi_awprot;
  wire                              s_axi_awvalid;
  wire                              s_axi_awready;
   // Slave Interface Write Data Ports
  wire [C_S_AXI_DATA_WIDTH-1:0]     s_axi_wdata;
  wire [(C_S_AXI_DATA_WIDTH/8)-1:0]   s_axi_wstrb;
  wire                              s_axi_wlast;
  wire                              s_axi_wvalid;
  wire                              s_axi_wready;
   // Slave Interface Write Response Ports
  wire                              s_axi_bready;
  wire [C_S_AXI_ID_WIDTH-1:0]       s_axi_bid;
  wire [1:0]                        s_axi_bresp;
  wire                              s_axi_bvalid;
   // Slave Interface Read Address Ports
  wire [C_S_AXI_ID_WIDTH-1:0]       s_axi_arid;
  wire [C_S_AXI_ADDR_WIDTH-1:0]     s_axi_araddr;
  wire [7:0]                        s_axi_arlen;
  wire [2:0]                        s_axi_arsize;
  wire [1:0]                        s_axi_arburst;
  wire [0:0]                        s_axi_arlock;
  wire [3:0]                        s_axi_arcache;
  wire [2:0]                        s_axi_arprot;
  wire                              s_axi_arvalid;
  wire                              s_axi_arready;
   // Slave Interface Read Data Ports
  wire                              s_axi_rready;
  wire [C_S_AXI_ID_WIDTH-1:0]       s_axi_rid;
  wire [C_S_AXI_DATA_WIDTH-1:0]     s_axi_rdata;
  wire [1:0]                        s_axi_rresp;
  wire                              s_axi_rlast;
  wire                              s_axi_rvalid;
  
  wire clk100_ui;
  wire rst_ui;
  wire rst_n_ui = ~rst_ui;
  reg aresetn;
  always @(posedge clk100_ui) begin
     aresetn <= ~rst_ui;
  end
  
 mig_7series_0 u_mig_7series_0
      (
       
       
// Memory interface ports
       .ddr3_addr                      (ddr3_addr),
       .ddr3_ba                        (ddr3_ba),
       .ddr3_cas_n                     (ddr3_cas_n),
       .ddr3_ck_n                      (ddr3_ck_n),
       .ddr3_ck_p                      (ddr3_ck_p),
       .ddr3_cke                       (ddr3_cke),
       .ddr3_ras_n                     (ddr3_ras_n),
       .ddr3_we_n                      (ddr3_we_n),
       .ddr3_dq                        (ddr3_dq),
       .ddr3_dqs_n                     (ddr3_dqs_n),
       .ddr3_dqs_p                     (ddr3_dqs_p),
       .ddr3_reset_n                   (ddr3_reset_n),
       .init_calib_complete            (init_calib_complete),
      
       .ddr3_cs_n                      (ddr3_cs_n),
       .ddr3_dm                        (ddr3_dm),
       .ddr3_odt                       (ddr3_odt),
// Application interface ports
       .ui_clk                         (clk100_ui),
       .ui_clk_sync_rst                (rst_ui),

       .aresetn                        (aresetn),
       .app_sr_req                     (1'b0),
       .app_ref_req                    (1'b0),
       .app_zq_req                     (1'b0),

// Slave Interface Write Address Ports
       .s_axi_awid                     (s_axi_awid),
       .s_axi_awaddr                   (s_axi_awaddr),
       .s_axi_awlen                    (s_axi_awlen),
       .s_axi_awsize                   (s_axi_awsize),
       .s_axi_awburst                  (s_axi_awburst),
       .s_axi_awlock                   (s_axi_awlock),
       .s_axi_awcache                  (s_axi_awcache),
       .s_axi_awprot                   (s_axi_awprot),
       .s_axi_awqos                    (4'h0),
       .s_axi_awvalid                  (s_axi_awvalid),
       .s_axi_awready                  (s_axi_awready),
// Slave Interface Write Data Ports
       .s_axi_wdata                    (s_axi_wdata),
       .s_axi_wstrb                    (s_axi_wstrb),
       .s_axi_wlast                    (s_axi_wlast),
       .s_axi_wvalid                   (s_axi_wvalid),
       .s_axi_wready                   (s_axi_wready),
// Slave Interface Write Response Ports
       .s_axi_bid                      (s_axi_bid),
       .s_axi_bresp                    (s_axi_bresp),
       .s_axi_bvalid                   (s_axi_bvalid),
       .s_axi_bready                   (s_axi_bready),
// Slave Interface Read Address Ports
       .s_axi_arid                     (s_axi_arid),
       .s_axi_araddr                   (s_axi_araddr),
       .s_axi_arlen                    (s_axi_arlen),
       .s_axi_arsize                   (s_axi_arsize),
       .s_axi_arburst                  (s_axi_arburst),
       .s_axi_arlock                   (s_axi_arlock),
       .s_axi_arcache                  (s_axi_arcache),
       .s_axi_arprot                   (s_axi_arprot),
       .s_axi_arqos                    (4'h0),
       .s_axi_arvalid                  (s_axi_arvalid),
       .s_axi_arready                  (s_axi_arready),
// Slave Interface Read Data Ports
       .s_axi_rid                      (s_axi_rid),
       .s_axi_rdata                    (s_axi_rdata),
       .s_axi_rresp                    (s_axi_rresp),
       .s_axi_rlast                    (s_axi_rlast),
       .s_axi_rvalid                   (s_axi_rvalid),
       .s_axi_rready                   (s_axi_rready),

      
       
// System Clock Ports
       .sys_clk_p                       (sys_clk_p),
       .sys_clk_n                       (sys_clk_n),      
       .sys_rst                        (sys_ddr_rst)
       );

ExampleRocketSystem ExampleRocketSystem(


	
        .mem_axi4_0_ar_ready(s_axi_arready),
	.mem_axi4_0_aw_ready(s_axi_awready),
	.mem_axi4_0_b_bits_id(s_axi_bid),
	.mem_axi4_0_b_bits_resp(s_axi_bresp),
	.mem_axi4_0_b_valid(s_axi_bvalid),
	.mem_axi4_0_r_bits_data(s_axi_rdata),
	.mem_axi4_0_r_bits_id(s_axi_rid),
	.mem_axi4_0_r_bits_last(s_axi_rlast),
	.mem_axi4_0_r_bits_resp(s_axi_rresp),
	.mem_axi4_0_r_valid(s_axi_rvalid),
	.mem_axi4_0_w_ready(s_axi_wready),
	.mem_axi4_0_ar_bits_addr(s_axi_araddr),
	.mem_axi4_0_ar_bits_burst(s_axi_arburst),
	.mem_axi4_0_ar_bits_cache(s_axi_arcache),
	.mem_axi4_0_ar_bits_id(s_axi_arid),
	.mem_axi4_0_ar_bits_len(s_axi_arlen),
	.mem_axi4_0_ar_bits_lock(s_axi_arlock),
	.mem_axi4_0_ar_bits_prot(s_axi_arprot),
	.mem_axi4_0_ar_bits_qos(main_rocketrv64_mem_axi_ar_payload_qos),
	.mem_axi4_0_ar_bits_size(s_axi_arsize),
	.mem_axi4_0_ar_valid(s_axi_arvalid),
	.mem_axi4_0_aw_bits_addr(s_axi_awaddr),
	.mem_axi4_0_aw_bits_burst(s_axi_awburst),
	.mem_axi4_0_aw_bits_cache(s_axi_awcache),
	.mem_axi4_0_aw_bits_id(s_axi_awid),
	.mem_axi4_0_aw_bits_len(s_axi_awlen),
	.mem_axi4_0_aw_bits_lock(s_axi_awlock),
	.mem_axi4_0_aw_bits_prot(s_axi_awprot),
	.mem_axi4_0_aw_bits_qos(main_rocketrv64_mem_axi_aw_payload_qos),
	.mem_axi4_0_aw_bits_size(s_axi_awsize),
	.mem_axi4_0_aw_valid(s_axi_awvalid),
	.mem_axi4_0_b_ready(s_axi_bready),
	.mem_axi4_0_r_ready(s_axi_rready),
	.mem_axi4_0_w_bits_data(s_axi_wdata),
	.mem_axi4_0_w_bits_last(s_axi_wlast),
	.mem_axi4_0_w_bits_strb(s_axi_wstrb),
	.mem_axi4_0_w_valid(s_axi_wvalid),
	
	
	
